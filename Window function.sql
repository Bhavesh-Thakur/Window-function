use mavenmovies;

-- Window Functions --

-- Q1. Rank the customers based on the total amount they've spent on rentals.
select * from payment;
select * from rental;
select * from customer;

select customer_id,first_name, last_name, total_rental, rank() over(order by total_rental desc) as ranking from (
select sum(amount)as total_rental, first_name ,last_name, c.customer_id from payment p join rental r on p.rental_id = r.rental_id
 join customer c on r.customer_id = c.customer_id group by customer_id )  as rental_details ;
 
  -- Q2. Calculate the cumulative revenue generated by each film over time.
  
  SELECT
        f.film_id,
        f.title,
        r.rental_date,
        p.amount,
        SUM(p.amount) OVER (PARTITION BY f.film_id ORDER BY r.rental_date) AS cumulative_revenue
    FROM
        film f
    JOIN
        inventory i ON f.film_id = i.film_id
    JOIN
        rental r ON i.inventory_id = r.inventory_id
    JOIN
        payment p ON r.rental_id = p.rental_id ;
  
  -- Q3. Determine the average rental duration for each film , considering films with similar lengths. 
  
  select film_id , title , length , avg(rental_duration) over ( partition by film_id order by length) as film_length
  from film ;
  
 -- Q4. Identify the top 3 films in each category based on their rental counts. 
 
  WITH FilmRentalCounts AS (
    SELECT
        f.film_id,
        f.title,
        c.name AS category,
        COUNT(r.rental_id) AS rental_count,
        ROW_NUMBER() OVER (PARTITION BY c.name ORDER BY COUNT(r.rental_id) DESC) AS row_num
    FROM
        film f
    JOIN
        film_category fc ON f.film_id = fc.film_id
    JOIN
        category c ON fc.category_id = c.category_id
    JOIN
        inventory i ON f.film_id = i.film_id
    JOIN
        rental r ON i.inventory_id = r.inventory_id
    GROUP BY
        f.film_id, f.title, c.name
)
SELECT
    film_id,
    title,
    category,
    rental_count
FROM
    FilmRentalCounts
WHERE
    row_num <= 3
ORDER BY
    category, row_num;

-- Q5. Calculate the difference in rental counts between each customer's total rental and the average rentals across all customers. 
   
    SELECT
        c.customer_id,
        c.first_name,
        c.last_name,
        COUNT(r.rental_id) AS rental_count,
        AVG(COUNT(r.rental_id)) OVER () AS avg_rental_count,
        COUNT(r.rental_id) - AVG(COUNT(r.rental_id)) OVER () AS rental_count_difference
    FROM
        customer c
    LEFT JOIN
        rental r ON c.customer_id = r.customer_id
    GROUP BY
        c.customer_id, c.first_name, c.last_name
ORDER BY
    customer_id;

-- Q6. Find the monthly revenue trend for the entire rental store over time. 
  
  WITH MonthlyRevenue AS (
    SELECT
        DATE_FORMAT(p.payment_date, '%Y-%m') AS month,
        SUM(p.amount) AS monthly_revenue,
        SUM(SUM(p.amount)) OVER (ORDER BY DATE_FORMAT(p.payment_date, '%Y-%m')) AS cumulative_revenue
    FROM
        payment p
    GROUP BY
        DATE_FORMAT(p.payment_date, '%Y-%m')
)
SELECT
    month,
    monthly_revenue,
    cumulative_revenue
FROM
    MonthlyRevenue
ORDER BY
    month;

-- Q7. Identify the customers whose total spending on rental falls within the top 20% of all customers. 

WITH CustomerTotalSpending AS (
    SELECT
        c.customer_id,
        c.first_name,
        c.last_name,
        SUM(p.amount) AS total_spending,
        PERCENT_RANK() OVER (ORDER BY SUM(p.amount) DESC) AS spending_percentile
    FROM
        customer c
    JOIN
        payment p ON c.customer_id = p.customer_id
    GROUP BY
        c.customer_id, c.first_name, c.last_name
)
SELECT
    customer_id,
    first_name,
    last_name,
    total_spending
FROM
    CustomerTotalSpending
WHERE
    spending_percentile <= 0.2
ORDER BY
    total_spending DESC;

-- Q8. Calculate the running total of rentals per category , ordered by rental count. 

SELECT
    category_id,
    COUNT(*) AS rental_count,
    SUM(COUNT(*)) OVER (PARTITION BY category_id ORDER BY COUNT(*) DESC) AS running_total
FROM
    film
JOIN
    film_category USING (film_id)
JOIN
    category USING (category_id)
GROUP BY
    category_id
ORDER BY
    rental_count DESC;
    
-- Q9. Find the films that have been rented less than the average rental count for their respective categories. 

  WITH RentalData AS (
    SELECT
        f.film_id,
        f.title,
        c.name,
        COUNT(r.rental_id) AS rental_count,
        AVG(COUNT(r.rental_id)) OVER (PARTITION BY c.name) AS avg_rental_count
    FROM
        film f
        JOIN film_category fc ON f.film_id = fc.film_id
        JOIN category c ON fc.category_id = c.category_id
        join inventory i on f.film_id = i.film_id left join rental r on i.inventory_id = r.inventory_id 
    GROUP BY
        f.film_id, f.title, c.name
)
SELECT
    film_id,
    title,
    c.name,
    rental_count,
    avg_rental_count
FROM
    RentalData
WHERE
    rental_count < avg_rental_count;

-- Q10. Identify the top 5 months with the highesr revenue and display the revenue generated in each month. 

WITH MonthlyRevenue AS (
    SELECT
        DATE_FORMAT(payment_date, '%Y-%m') AS month,
        SUM(amount) AS revenue,
        ROW_NUMBER() OVER (ORDER BY SUM(amount) DESC) AS ranking
    FROM
        payment
    GROUP BY
        month
)

SELECT
    month,
    revenue
FROM
    MonthlyRevenue
WHERE
    ranking <= 5
ORDER BY
    ranking;
 
